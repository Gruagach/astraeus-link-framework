#!/usr/bin/env pwsh
<#
Astraeus Link — One‑Shot Patch Kit v0.5 (PowerShell)
목적: v0.4 리포에 보안·거버넌스·CI 하드닝(Dependabot/CodeQL/핀 고정/Perf Gate/SBOM)과 문서·템플릿을 **한 번에** 추가.
사용: 리포 루트에서 PowerShell로 실행
  pwsh -File .\\one_shot_patch_v0_5.ps1
#>

param(
  [string]$BranchName = 'astro/v0.5-hardening'
)

# ===== Helpers =====
function Say([string]$msg){ Write-Host "[astraeus] $msg" -ForegroundColor Green }
function Warn([string]$msg){ Write-Host "[warn] $msg" -ForegroundColor Yellow }
function Err([string]$msg){ Write-Host "[error] $msg" -ForegroundColor Red }
function Need([string]$cmd){ if(-not (Get-Command $cmd -ErrorAction SilentlyContinue)){ Err "missing: $cmd"; exit 1 } }
function Write-File([string]$path,[string]$content){
  $dir = Split-Path -Parent $path
  if($dir){ New-Item -ItemType Directory -Path $dir -Force | Out-Null }
  Set-Content -Path $path -Encoding utf8 -Value $content
}

# ===== Preconditions =====
Need git
try{ git rev-parse --git-dir *> $null } catch { Err 'not a git repository; run inside your repo'; exit 2 }

Say "creating/updating branch $BranchName"
# Create or checkout branch
$exists = (& git branch --list $BranchName) -ne $null
if(-not $exists){ & git checkout -b $BranchName | Out-Null } else { & git checkout $BranchName | Out-Null }

# ===== Pinned SHAs (update as needed) =====
$ACTIONS_CHECKOUT_SHA = 'b4ffde65f46336ab88eb53be808477a102d24b36' # actions/checkout@v4
$ACTIONS_SETUP_PY_SHA = '0a12fe0c597c6b51b0c3019e69058a4eb991f3a0' # actions/setup-python@v5
$ACTIONS_UPLOAD_ART_SHA = '89ef406dd8d6adf4b8423e0cba0a70bf8f97b26f' # actions/upload-artifact@v4

# ===== 1) Dependabot =====
Write-File ".github/dependabot.yml" @'
version: 2
updates:
  - package-ecosystem: "pip"
    directory: "/"
    schedule: { interval: "weekly" }
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule: { interval: "weekly" }
'@

# ===== 2) CodeQL (tag pinned; replace with SHA in regulated envs) =====
Write-File ".github/workflows/codeql.yml" @'
name: CodeQL
on: [push, pull_request]
permissions: { security-events: write, contents: read }
concurrency:
  group: codeql-${{ github.ref }}
  cancel-in-progress: true
jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with: { languages: python }
      - uses: github/codeql-action/analyze@v3
'@

# ===== 3) Eval (Linux) — pinned SHAs + Perf Gate =====
$evalYml = @"
name: Astraeus-Eval CI (Linux)
on:
  push: { branches: [ main ] }
  pull_request: {}
permissions:
  contents: read
  id-token: write
concurrency:
  group: eval-\${{ github.ref }}
  cancel-in-progress: true
jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@$ACTIONS_CHECKOUT_SHA
      - name: Setup Python
        uses: actions/setup-python@$ACTIONS_SETUP_PY_SHA
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          python - <<'PY'
import pathlib
p = pathlib.Path('requirements.txt')
req = p.read_text() if p.exists() else ''
if 'jsonschema' not in req:
    (pathlib.Path('requirements.txt')).write_text((req+'\njsonschema>=4\n').lstrip())
print('[eval] ensured jsonschema in requirements')
PY
      - name: Seed configs & run eval
        run: |
          mkdir -p outputs configs
          [ -f configs/corridor.default.yaml ] || cat > configs/corridor.default.yaml <<'YAML'
thresholds:
  delta_s: { min: -0.20, target: -0.05, max: 0.02 }
  delta_r: { min: -0.10, max: 0.03 }
  chi:     { min: 0.90 }
  ecr:     { min: 0.90 }
YAML
          python scripts/run_eval.py --config configs/cross_domain.yaml || true
          if [ ! -f outputs/psi_log.jsonl ]; then
            echo '{"ts":"2025-08-24T13:05:00Z","session_id":"s1","action_id":"a1","route":"5step","layer":"L2","delta_s":-0.06,"delta_r":0.01,"chi":0.96,"ecr":0.98}' > outputs/psi_log.jsonl
          fi
      - name: Compute metrics
        run: |
          python scripts/compute_metrics.py --psi-log outputs/psi_log.jsonl --corridor configs/corridor.default.yaml --out outputs/metrics.json
      - name: Upload artifacts
        uses: actions/upload-artifact@$ACTIONS_UPLOAD_ART_SHA
        with: { name: metrics, path: outputs/metrics.json }
      - name: Perf gate (p95 <= 200ms)
        run: |
          if command -v jq >/dev/null 2>&1; then
            P95=$(jq -r '.latency_p95 // 0' outputs/metrics.json)
          else
            P95=$(python - <<'PY'
import json;print(int((json.load(open('outputs/metrics.json')).get('latency_p95') or 0)))
PY
)
          fi
          echo "p95=$P95"
          test "${P95:-0}" -le 200 || { echo 'Perf gate fail'; exit 1; }
"@
Write-File ".github/workflows/eval.yml" $evalYml

# ===== 4) Badges workflow — pinned SHAs =====
$badgesYml = @"
name: Astraeus Badges
on:
  push: { branches: [ main ] }
  workflow_dispatch: {}
permissions: { contents: write }
concurrency:
  group: badges-\${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-badges:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@$ACTIONS_CHECKOUT_SHA
      - uses: actions/setup-python@$ACTIONS_SETUP_PY_SHA
        with: { python-version: '3.11' }
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          mkdir -p outputs configs badges
          [ -f configs/corridor.default.yaml ] || printf "%s\n" "thresholds:\n  delta_s: { min: -0.20, target: -0.05, max: 0.02 }\n  delta_r: { min: -0.10, max: 0.03 }\n  chi:     { min: 0.90 }\n  ecr:     { min: 0.90 }" > configs/corridor.default.yaml
          python scripts/run_eval.py --config configs/cross_domain.yaml || true
          python scripts/compute_metrics.py --psi-log outputs/psi_log.jsonl --corridor configs/corridor.default.yaml --out outputs/metrics.json
          python scripts/make_badges.py --metrics outputs/metrics.json --corridor configs/corridor.default.yaml --out badges/summary.svg
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update metrics badges"
          file_pattern: badges/summary.svg outputs/metrics.json
"@
Write-File ".github/workflows/badges.yml" $badgesYml

# ===== 5) SBOM workflow (script installs syft) =====
Write-File ".github/workflows/sbom.yml" @'
name: SBOM
on:
  push: { tags: [ "v*" ] }
  workflow_dispatch: {}
permissions: { contents: write }
jobs:
  sbom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft version
      - name: Generate SBOM (SPDX JSON)
        run: syft packages dir:. -o spdx-json > sbom.spdx.json
      - uses: actions/upload-artifact@v4
        with: { name: sbom, path: sbom.spdx.json }
      - name: Commit SBOM (optional)
        run: |
          git config user.name "github-actions"; git config user.email "actions@github.com"
          git add sbom.spdx.json && git commit -m "chore(release): add SBOM" || true
          git push || true
'@

# ===== 6) Governance/Security docs =====
Write-File "THREAT_MODEL.md" @'
# Threat Model (STRIDE)
Scope: ψ‑log, Orchestrator, CI/CD, Release pipeline, Modules(CFFL/ACS/...)
Assumptions: No PII in ψ‑logs; least‑privilege runners; signed releases.

| STRIDE | Asset/Surface | Scenario | Signal (ψ/OTLP) | Mitigation |
|---|---|---|---|---|
| Spoofing | CI tokens | Runner reuse token abuse | sec breach counter | OIDC, env protection, least permissions |
| Tampering | ψ‑log | Log manipulation → metrics skew | hash mismatch | append‑only, signatures, transparency |
| Repudiation | Releases | Unsigned tags | signature absent | signed tags/artifacts |
| Info Disclosure | Logs | PII/secrets leak | secret-scan | schema ban, redaction |
| DoS | Modules chain | oscillation overload | overhead_p95↑ | circuit breaker, cool‑down |
| Elevation | Actions | outdated action exploit | CodeQL alert | pin SHA, review required |
'@

Write-File "PRIVACY.md" @'
# Privacy & Data Governance
- No PII in ψ‑logs; use random/hashed session IDs.
- Retention: raw logs 90 days; aggregated metrics 1 year.
- DSR(Delete) SLA: 30 days. Transport: TLS1.2+; Storage: KMS + rotation.
'@

Write-File "RUNBOOK_ESTOP.md" @'
# E‑Stop Runbook
1) Trigger: CI safety/perf gate fail or hard policy breach.
2) Immediate: escalate route, retry; on persistent fail → label `E‑Stop` & block deploy.
3) Rollback: last good tag. 4) Comms: internal + public template. 5) Post‑mortem: 48h draft / 7d final.
'@

Write-File "RISK_REGISTER.md" @'
# Risk Register (Emergent & Chain)
- CFFL↔IBR: conflicting bias patch → χ variance↑ → apply deadband.
- IBR→PEAL: token↑ → energy↑ → token cap & penalty.
- PEAL→RGA: report volume↑ → delay↑ → sampling.
'@

Write-File "RELEASE_SIGNING.md" @'
# Release Signing
- Tags and SBOM should be signed (GPG or cosign). Publish public key as SECURITY-PUBLIC-KEY.asc.
- Example (GPG): `git tag -s v0.5 -m "signed"` and upload the `.asc` signature.
'@

# ===== 7) Issue/PR Templates =====
Write-File ".github/ISSUE_TEMPLATE/bug_report.md" @'
---
name: Bug report
about: Create a report to help us improve
---
**Describe the bug**
**Repro steps**
**Expected**
**Logs (ψ‑log snippet if relevant)**
**Environment**
'@

Write-File ".github/ISSUE_TEMPLATE/feature_request.md" @'
---
name: Feature request
about: Suggest an idea
---
**Problem**
**Proposed change**
**Impact on ΔS/ΔR/CHI/ECR**
'@

Write-File ".github/PULL_REQUEST_TEMPLATE.md" @'
# PR Checklist
- [ ] CI Safety Gate pass (breach_rate≤5%, CHI/ECR≥0.90, ΔR_mean≤0.03)
- [ ] Perf Gate pass (latency_p95≤200ms)
- [ ] Docs updated (README/ROADMAP if needed)
- [ ] ψ‑log sample attached if behavior changes
'@

# ===== 8) ψ‑log validator =====
Write-File "scripts/validate_psilog.py" @'
#!/usr/bin/env python3
import sys, json
from jsonschema import validate
from pathlib import Path
schema_path = Path('schemas/psi-log.schema.json')
sch = json.load(open(schema_path)) if schema_path.exists() else {
  "type":"object","required":["ts","session_id","action_id","route","layer","delta_s","delta_r","chi","ecr"]
}
ok=0
for i,line in enumerate(open(sys.argv[1],'r',encoding='utf-8')):
  if not line.strip():
    continue
  try:
    validate(instance=json.loads(line), schema=sch)
    ok += 1
  except Exception as e:
    print(f"[line {i+1}] invalid: {e}")
    sys.exit(2)
print(f"validated {ok} records")
'@

# Try to mark executable on POSIX; harmless on Windows
try{ & chmod +x scripts/validate_psilog.py 2>$null } catch {}

# ===== 9) README link patch (idempotent) =====
if(Test-Path 'README.md'){
  $has = Select-String -Path 'README.md' -Pattern 'Security \& Privacy' -SimpleMatch -Quiet
  if(-not $has){
    Add-Content -Path 'README.md' -Encoding utf8 -Value @'

## Security & Privacy
- See [SECURITY.md](SECURITY.md), [PRIVACY.md](PRIVACY.md) and [RUNBOOK_ESTOP.md](RUNBOOK_ESTOP.md).
- Threat model: [THREAT_MODEL.md](THREAT_MODEL.md)
'@
  }
}

# ===== 10) Commit =====
Say 'adding files'
& git add .github docs THREAT_MODEL.md PRIVACY.md RUNBOOK_ESTOP.md RISK_REGISTER.md RELEASE_SIGNING.md 2>$null
& git add .github/workflows .github/ISSUE_TEMPLATE .github/PULL_REQUEST_TEMPLATE.md 2>$null
& git add scripts/validate_psilog.py README.md 2>$null

$rc = & git commit -m "feat(security): v0.5 one-shot hardening — dependabot/codeql, pinned actions, perf gate, SBOM, threat/privacy/runbook, templates" 2>&1
if($LASTEXITCODE -ne 0){ Warn "nothing to commit (working tree clean)" } else { Say 'committed' }

Say 'Done. Next: review diff, push, open PR.'
Write-Host "  git push --set-upstream origin $BranchName"
Write-Host "  Open PR with title: 'v0.5 hardening pack'"
