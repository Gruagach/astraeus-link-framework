"""
Astraeus Link Agent 구현 모듈
"""

import os
import yaml
import logging
from jinja2 import Environment, FileSystemLoader, Template

# 기본 템플릿 내용 (fallback용)
default_template = '''
# Fallback Astraeus Link Agent 설정
TARGET_ΔS: -0.05
TARGET_ΔR: +0.03
ΔS_GRAD_THRESHOLD: 0.01
FRAME_DIVERGENCE_THETA: 0.35
ELASTICITY_SIGMA_TIERS: [0.005, 0.01, 0.02]

STEPS: 3

ELASTICITY_RULE: |
  σ < 0.005 => ΔR += 1
  σ > 0.02  => ΔR -= 1

CANVAS:
  M1: ['ψ-log', 'p_f']
  M2: ['함수 추상화', 'w₄·p_f']
  M3: ['외부 검증']
  M3b: ['Frame Sentinel', 'θ 조정']
  M4: ['A/B/C 테스트', '회고']
  M5: ['CHI·ECR·ΔS·p_f 모니터', '경고']

SEARCH_CRITERIA:
  freshness: '1 month'
  authority:
    journal: 0.9
    institution: 0.8
    web: 0.5
  relevance: 0.7

MONITORING:
  log_endpoint: "https://monitoring.company/api/astraeus"
  metrics: ['ΔS', 'ΔR', 'ΔS_grad', 'sigma', 'frame_div', 'pruning_signal', 'latency', 'ext_fail']
  alert_thresholds:
    ΔS: 0.2
    ΔR: 0.1
    ΔS_grad: 0.015
    frame_div: 5
    latency: 2.0
  alert_channels: ['slack', 'dashboard']

FORMAT_MODE: ['STANDARD', 'BRIEF', 'EXTENDED', 'DETAILED']
'''

# 로깅 설정
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AstraeusAgent:
    def __init__(self, template_path: str = 'examples/agent_prompt.yml'):
        '''
        템플릿 로드: fallback 지원. __file__이 없을 때 cwd 사용.
        '''
        base_dir = os.getcwd()
        full_path = os.path.join(base_dir, template_path)
        self.env = Environment(
            loader=FileSystemLoader(base_dir),
            trim_blocks=True,
            lstrip_blocks=True
        )
        if os.path.isfile(full_path):
            self.template = self.env.get_template(template_path)
            logger.info(f"Loaded template from %s", full_path)
        else:
            if template_path != 'examples/agent_prompt.yml':
                raise FileNotFoundError(f"Template file not found: {full_path}")
            self.template = Template(default_template)
            logger.info("Loaded fallback default template")

    def parse_prompt(self, question: str, keywords: list, metrics: dict) -> dict:
        '''
        Jinja 템플릿 렌더링 및 YAML 파싱
        '''
        rendered = self.template.render(
            question=question,
            keywords=keywords,
            metrics=metrics
        )
        params = yaml.safe_load(rendered)
        return params

    def evaluate_meta(self, metrics: dict) -> dict:
        '''
        메타 지표 평가 및 자동 조정
        '''
        adjusted = metrics.copy()
        sigma = metrics.get('sigma', 0)
        if sigma < 0.005:
            adjusted['ΔR'] = adjusted.get('ΔR', 0) + 1
        elif sigma > 0.02:
            adjusted['ΔR'] = adjusted.get('ΔR', 0) - 1
        return adjusted

    def run_canvas(self, canvas_config: dict) -> None:
        '''
        CANVAS 단계별 실행(로그)
        '''
        for step, actions in canvas_config.items():
            logger.info(f"Canvas step {step}: {actions}")

    def trigger_external_search(self, criteria: dict) -> dict:
        '''
        외부 검색 모의
        '''
        return {'results': [], 'criteria': criteria}

    def alert_loop(self, metrics: dict) -> list:
        '''
        임계치 초과 시 경보 생성
        '''
        alerts = []
        thresholds = {'ΔS': 0.2, 'ΔR': 0.1}
        for k, thr in thresholds.items():
            if metrics.get(k, 0) > thr:
                alerts.append(f"{k} exceeded: {metrics[k]} > {thr}")
        return alerts

    def process_question(self, question: str, keywords: list, metrics: dict) -> dict:
        '''
        전체 워크플로우 실행
        '''
        params = self.parse_prompt(question, keywords, metrics)
        adjusted_metrics = self.evaluate_meta(metrics)
        self.run_canvas(params.get('CANVAS', {}))
        self.trigger_external_search(params.get('SEARCH_CRITERIA', {}))
        self.alert_loop(adjusted_metrics)
        return params

# 유닛 테스트

def test_parse_prompt():
    agent = AstraeusAgent()
    p = agent.parse_prompt("brand x, color red, size big", [], {'ΔS':0,'ΔR':0,'sigma':0})
    assert 'TARGET_ΔS' in p and 'STEPS' in p


def test_evaluate_meta():
    agent = AstraeusAgent()
    assert agent.evaluate_meta({'ΔS':0,'ΔR':0,'sigma':0})['ΔR'] == 1
    assert agent.evaluate_meta({'ΔS':0,'ΔR':0,'sigma':0.03})['ΔR'] == -1


def test_run_canvas():
    agent = AstraeusAgent()
    agent.run_canvas({'M1':['a'], 'M2':['b']})


def test_trigger_external_search():
    agent = AstraeusAgent()
    res = agent.trigger_external_search({'freshness':'1 month'})
    assert res['criteria']['freshness'] == '1 month'


def test_alert_loop():
    agent = AstraeusAgent()
    alerts = agent.alert_loop({'ΔS':0.3,'ΔR':0.0})
    assert any('ΔS exceeded' in a for a in alerts)
    assert not any('ΔR exceeded' in a for a in alerts)
