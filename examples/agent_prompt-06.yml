**프로젝트 구조 및 새 파일 생성**

다음 단계로 아래 파일들을 추가/구현합니다:

---

### 1. `src/astraeus_agent.py`

```python
"""
AstraeusAgent 기본 구현 예시
- handle() 메서드를 통해 입력 프롬프트에 대한 간단한 응답 반환
"""

class AstraeusAgent:
    def __init__(self):
        # 초기화 로직(필요 시 설정값 로드 등)
        pass

    def handle(self, prompt: str) -> str:
        """
        프롬프트에 따라 응답을 반환합니다.
        예시: "ping" → "pong"
        """
        text = prompt.strip().lower()
        if text == "ping":
            return "pong"
        if text == "status":
            return "OK"
        # 기본 응답: echo
        return f"Echo: {prompt}"
```

---

### 2. `tests/test_agent_real.py` (이미 생성됨)

* 기존 파라미터화 테스트와 매칭되도록 위 `handle` 동작을 커버합니다.

---

### 3. `tests/test_demo.py`

```python
import subprocess
import sys
import pytest

@pytest.fixture(scope="module")
def demo_output():
    # examples/python_example/demo.py를 실행하고 출력 캡처
    result = subprocess.run(
        [sys.executable, "examples/python_example/demo.py"],
        capture_output=True,
        text=True,
        check=True,
    )
    return result.stdout


def test_demo_response_contains_echo(demo_output):
    # 기본 프롬프트 "Hello Astraeus!"에 대한 출력 확인
    assert "Response:" in demo_output
    assert "Echo: Hello Astraeus!" in demo_output
```

---

### 4. `README.md` 템플릿

````markdown
# Astraeus Agent Demo

## 실행 방법
```bash
python examples/python_example/demo.py
````

## 테스트

```bash
pytest -q
```

```

---

이제 위 파일들을 생성 후 `pytest -q`를 실행하여 모든 테스트가 통과하는지 확인해 보세요.

```
