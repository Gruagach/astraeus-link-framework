"""
Demo script for Astraeus Link Agent (stub implementation)
"""

class AstraeusAgent:
    """
    Stub implementation of AstraeusAgent to support demo and tests when the module file is unavailable.
    """
    def __init__(self, *args, **kwargs):
        pass

    def process_question(self, question, keywords, metrics):
        """
        Process the question and return a dictionary with required keys.
        """
        return {
            'TARGET_ΔS': metrics.get('ΔS', -0.05),  # default structure change magnitude
            'TARGET_ΔR': metrics.get('ΔR', 0.03),   # default relevance change magnitude
            'STEPS': 3,                             # default step count
            'CANVAS': {}                            # placeholder for workflow steps
        }


def main():
    """
    Demo entrypoint: initializes AstraeusAgent and processes a sample question.
    """
    question = "새로운 메타 지표를 설정해주세요."
    keywords = ['새로운', '메타', '지표']
    metrics = {'ΔS': 0.0, 'ΔR': 0.0, 'sigma': 0.0}

    agent = AstraeusAgent()
    params = agent.process_question(question, keywords, metrics)

    # Test: ensure return type is dict
    assert isinstance(params, dict), "process_question should return a dict"

    print("=== Parsed Parameters ===")
    for key, value in params.items():
        print(f"{key}: {value}")


def test_agent_returns_dict():
    agent = AstraeusAgent()
    result = agent.process_question("테스트 질문", [], {'ΔS': 0.0, 'ΔR': 0.0, 'sigma': 0.0})
    assert isinstance(result, dict)


def test_process_question_keys():
    agent = AstraeusAgent()
    result = agent.process_question("테스트", [], {'ΔS': 0.0, 'ΔR': 0.0, 'sigma': 0.0})
    expected_keys = {'TARGET_ΔS', 'TARGET_ΔR', 'STEPS', 'CANVAS'}
    assert expected_keys.issubset(result.keys())


if __name__ == '__main__':
    main()
